// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/token/ERC721/IERC721.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract MewbulbaToken is ERC20, Ownable {
    IERC721 public bulbaNFT;
    mapping(uint256 => uint256) private tokenBalances;

    constructor(address _bulbaNFTAddress) ERC20("Mewbulba", "MEWB") {
        bulbaNFT = IERC721(_bulbaNFTAddress);
    }

    function mint(address account, uint256 amount) public onlyOwner {
        _mint(account, amount);
    }

    function burn(uint256 amount) public {
        require(balanceOf(msg.sender) >= amount, "Insufficient balance");
        _burn(msg.sender, amount);
    }

    function burnTokensForBulbaNFT(uint256 tokenId, uint256 amount) public {
        require(bulbaNFT.ownerOf(tokenId) == msg.sender, "Caller is not the owner of the Bulba NFT");

        tokenBalances[tokenId] += amount;
        _burn(msg.sender, amount);
    }

    function getBulbaNFTTokenBalance(uint256 tokenId) public view returns (uint256) {
        return tokenBalances[tokenId];
    }
}
